import { __decorate, __metadata, __extends } from 'tslib';
import { Injectable, ɵɵdefineInjectable, NgModule } from '@angular/core';

/**
 * 判断是否在浏览器中渲染Angular应用
 * `decorator` 无法直接使用Angular `PLATFORM_ID` 标识
 * 这带来的好处是当服务端自行填充 Document 时也能很好的识别
 */
var isBrowser = typeof document === 'object' && !!document;
var StorageUtil = /** @class */ (function () {
    function StorageUtil() {
    }
    StorageUtil.get = function (storage, key) {
        if (storage == null) {
            return null;
        }
        var value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    };
    StorageUtil.set = function (storage, key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 't'; }
        if (storage == null) {
            return;
        }
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    };
    StorageUtil.remove = function (storage, key) {
        if (storage == null) {
            return;
        }
        storage.removeItem(key);
    };
    StorageUtil.key = function (storage, index) {
        if (storage == null) {
            return;
        }
        return storage.key(index);
    };
    StorageUtil.getExpired = function (val, unit) {
        if (val <= 0)
            return 0;
        var now = +new Date();
        switch (unit) {
            case 's': // 秒
                return now + 1000 * val;
            case 'm': // 分
                return now + 1000 * 60 * val;
            case 'h': // 时
                return now + 1000 * 60 * 60 * val;
            case 'd': // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w': // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y': // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't': // 自定义
                return now + val;
        }
        return 0;
    };
    StorageUtil.stringify = function (value) {
        return JSON.stringify(value);
    };
    StorageUtil.parse = function (text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (e) {
            return text;
        }
    };
    return StorageUtil;
}());

var cache = {};
function WebStorage(storage, key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 'd'; }
    return function (target, propertyName) {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: function () {
                return StorageUtil.get(storage, key);
            },
            set: function (value) {
                if (!cache[key]) {
                    var storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * `localStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
function LocalStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? localStorage : null, key, expiredAt, expiredUnit);
}
/**
 * `sessionStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
function SessionStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? sessionStorage : null, key, expiredAt, expiredUnit);
}

var StorageService = /** @class */ (function () {
    function StorageService(storage) {
        this.storage = storage;
    }
    StorageService.prototype.get = function (key) {
        return StorageUtil.get(this.storage, key);
    };
    StorageService.prototype.set = function (key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 'd'; }
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    };
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    StorageService.prototype.remove = function (key) {
        var _this = this;
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        var index = 0;
        var next = StorageUtil.key(this.storage, index);
        var ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(function (v) { return StorageUtil.remove(_this.storage, v); });
    };
    StorageService.prototype.clear = function () {
        this.storage.clear();
    };
    StorageService.ctorParameters = function () { return [
        { type: Storage }
    ]; };
    StorageService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Storage])
    ], StorageService);
    return StorageService;
}());
var LocalStorageService = /** @class */ (function (_super) {
    __extends(LocalStorageService, _super);
    function LocalStorageService() {
        return _super.call(this, isBrowser ? localStorage : null) || this;
    }
    LocalStorageService.ɵprov = ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(); }, token: LocalStorageService, providedIn: "root" });
    LocalStorageService = __decorate([
        Injectable({ providedIn: 'root' }),
        __metadata("design:paramtypes", [])
    ], LocalStorageService);
    return LocalStorageService;
}(StorageService));
var SessionStorageService = /** @class */ (function (_super) {
    __extends(SessionStorageService, _super);
    function SessionStorageService() {
        return _super.call(this, isBrowser ? sessionStorage : null) || this;
    }
    SessionStorageService.ɵprov = ɵɵdefineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(); }, token: SessionStorageService, providedIn: "root" });
    SessionStorageService = __decorate([
        Injectable({ providedIn: 'root' }),
        __metadata("design:paramtypes", [])
    ], SessionStorageService);
    return SessionStorageService;
}(StorageService));

var AngularWebStorageModule = /** @class */ (function () {
    function AngularWebStorageModule() {
    }
    AngularWebStorageModule = __decorate([
        NgModule()
    ], AngularWebStorageModule);
    return AngularWebStorageModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AngularWebStorageModule, LocalStorage, LocalStorageService, SessionStorage, SessionStorageService, StorageService };
//# sourceMappingURL=angular-web-storage.js.map
