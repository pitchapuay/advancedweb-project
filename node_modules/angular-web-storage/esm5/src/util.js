/**
 * 判断是否在浏览器中渲染Angular应用
 * `decorator` 无法直接使用Angular `PLATFORM_ID` 标识
 * 这带来的好处是当服务端自行填充 Document 时也能很好的识别
 */
export var isBrowser = typeof document === 'object' && !!document;
var StorageUtil = /** @class */ (function () {
    function StorageUtil() {
    }
    StorageUtil.get = function (storage, key) {
        if (storage == null) {
            return null;
        }
        var value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    };
    StorageUtil.set = function (storage, key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 't'; }
        if (storage == null) {
            return;
        }
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    };
    StorageUtil.remove = function (storage, key) {
        if (storage == null) {
            return;
        }
        storage.removeItem(key);
    };
    StorageUtil.key = function (storage, index) {
        if (storage == null) {
            return;
        }
        return storage.key(index);
    };
    StorageUtil.getExpired = function (val, unit) {
        if (val <= 0)
            return 0;
        var now = +new Date();
        switch (unit) {
            case 's': // 秒
                return now + 1000 * val;
            case 'm': // 分
                return now + 1000 * 60 * val;
            case 'h': // 时
                return now + 1000 * 60 * 60 * val;
            case 'd': // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w': // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y': // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't': // 自定义
                return now + val;
        }
        return 0;
    };
    StorageUtil.stringify = function (value) {
        return JSON.stringify(value);
    };
    StorageUtil.parse = function (text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (e) {
            return text;
        }
    };
    return StorageUtil;
}());
export { StorageUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItd2ViLXN0b3JhZ2UvIiwic291cmNlcyI6WyJzcmMvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQTs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLE9BQU8sUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBRXBFO0lBQUE7SUFzRkEsQ0FBQztJQXJGUSxlQUFHLEdBQVYsVUFBVyxPQUF1QixFQUFFLEdBQVc7UUFDN0MsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3hFLElBQUksS0FBSyxLQUFLLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNoQyxJQUNFLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFdBQVc7WUFDckMsS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDO1lBQ3BCLENBQUMsSUFBSSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUM1QjtZQUNBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTSxlQUFHLEdBQVYsVUFDRSxPQUF1QixFQUN2QixHQUFXLEVBQ1gsS0FBVSxFQUNWLFNBQXFCLEVBQ3JCLFdBQThCO1FBRDlCLDBCQUFBLEVBQUEsYUFBcUI7UUFDckIsNEJBQUEsRUFBQSxpQkFBOEI7UUFFOUIsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ25CLE9BQVE7U0FDVDtRQUNELE9BQU8sQ0FBQyxPQUFPLENBQ2IsR0FBRyxFQUNILFdBQVcsQ0FBQyxTQUFTLENBQUM7WUFDcEIsUUFBUSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztZQUN4RCxNQUFNLEVBQUUsS0FBSztTQUNkLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVNLGtCQUFNLEdBQWIsVUFBYyxPQUF1QixFQUFFLEdBQVc7UUFDaEQsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ25CLE9BQVE7U0FDVDtRQUNELE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLGVBQUcsR0FBVixVQUFXLE9BQXVCLEVBQUUsS0FBYTtRQUMvQyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDbkIsT0FBUTtTQUNUO1FBQ0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFYyxzQkFBVSxHQUF6QixVQUEwQixHQUFXLEVBQUUsSUFBaUI7UUFDdEQsSUFBSSxHQUFHLElBQUksQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN4QixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUMxQixLQUFLLEdBQUcsRUFBRSxJQUFJO2dCQUNaLE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQy9CLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3BDLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUN6QyxLQUFLLEdBQUcsRUFBRSxJQUFJO2dCQUNaLE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzdDLEtBQUssR0FBRyxFQUFFLElBQUk7Z0JBQ1osT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDL0MsS0FBSyxHQUFHLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDcEI7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFYyxxQkFBUyxHQUF4QixVQUF5QixLQUFVO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRWMsaUJBQUssR0FBcEIsVUFBcUIsSUFBWTtRQUMvQixJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztTQUNqQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUF0RkQsSUFzRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRXhwaXJhdGlvbiB0aW1lIHVuaXRcclxuICogczogc2Vjb25kc1xyXG4gKiBtOiBtaW51dGVcclxuICogaDogaG91clxyXG4gKiBkOiBkYXlcclxuICogdzogd2Vla1xyXG4gKiB5OiB5ZWFyXHJcbiAqIHQ6IEN1c3RvbSAobWlsbGlzZWNvbmQpXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFeHBpcmVkVW5pdCA9ICdzJyB8ICdtJyB8ICdoJyB8ICdkJyB8ICd3JyB8ICd5JyB8ICd0JztcclxuXHJcbi8qKlxyXG4gKiDliKTmlq3mmK/lkKblnKjmtY/op4jlmajkuK3muLLmn5NBbmd1bGFy5bqU55SoXHJcbiAqIGBkZWNvcmF0b3JgIOaXoOazleebtOaOpeS9v+eUqEFuZ3VsYXIgYFBMQVRGT1JNX0lEYCDmoIfor4ZcclxuICog6L+Z5bim5p2l55qE5aW95aSE5piv5b2T5pyN5Yqh56uv6Ieq6KGM5aGr5YWFIERvY3VtZW50IOaXtuS5n+iDveW+iOWlveeahOivhuWIq1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcgJiYgISFkb2N1bWVudDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlVXRpbCB7XHJcbiAgc3RhdGljIGdldChzdG9yYWdlOiBTdG9yYWdlIHwgbnVsbCwga2V5OiBzdHJpbmcpIHtcclxuICAgIGlmIChzdG9yYWdlID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YWx1ZSA9IFN0b3JhZ2VVdGlsLnBhcnNlKHN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8ICdudWxsJykgfHwgbnVsbDtcclxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAoXHJcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgdHlwZW9mIHZhbHVlLl9leHBpcmVkICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICB2YWx1ZS5fZXhwaXJlZCAhPT0gMCAmJlxyXG4gICAgICArbmV3IERhdGUoKSA+IHZhbHVlLl9leHBpcmVkXHJcbiAgICApIHtcclxuICAgICAgU3RvcmFnZVV0aWwucmVtb3ZlKHN0b3JhZ2UsIGtleSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZS5fdmFsdWUgfHwgbnVsbDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXQoXHJcbiAgICBzdG9yYWdlOiBTdG9yYWdlIHwgbnVsbCxcclxuICAgIGtleTogc3RyaW5nLFxyXG4gICAgdmFsdWU6IGFueSxcclxuICAgIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcclxuICAgIGV4cGlyZWRVbml0OiBFeHBpcmVkVW5pdCA9ICd0JyxcclxuICApIHtcclxuICAgIGlmIChzdG9yYWdlID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIDtcclxuICAgIH1cclxuICAgIHN0b3JhZ2Uuc2V0SXRlbShcclxuICAgICAga2V5LFxyXG4gICAgICBTdG9yYWdlVXRpbC5zdHJpbmdpZnkoe1xyXG4gICAgICAgIF9leHBpcmVkOiBTdG9yYWdlVXRpbC5nZXRFeHBpcmVkKGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpLFxyXG4gICAgICAgIF92YWx1ZTogdmFsdWUsXHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZW1vdmUoc3RvcmFnZTogU3RvcmFnZSB8IG51bGwsIGtleTogc3RyaW5nKSB7XHJcbiAgICBpZiAoc3RvcmFnZSA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiA7XHJcbiAgICB9XHJcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBrZXkoc3RvcmFnZTogU3RvcmFnZSB8IG51bGwsIGluZGV4OiBudW1iZXIpIHtcclxuICAgIGlmIChzdG9yYWdlID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIDtcclxuICAgIH1cclxuICAgIHJldHVybiBzdG9yYWdlLmtleShpbmRleCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRFeHBpcmVkKHZhbDogbnVtYmVyLCB1bml0OiBFeHBpcmVkVW5pdCk6IG51bWJlciB7XHJcbiAgICBpZiAodmFsIDw9IDApIHJldHVybiAwO1xyXG4gICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKCk7XHJcbiAgICBzd2l0Y2ggKHVuaXQpIHtcclxuICAgICAgY2FzZSAncyc6IC8vIOenklxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogdmFsO1xyXG4gICAgICBjYXNlICdtJzogLy8g5YiGXHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiA2MCAqIHZhbDtcclxuICAgICAgY2FzZSAnaCc6IC8vIOaXtlxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogNjAgKiA2MCAqIHZhbDtcclxuICAgICAgY2FzZSAnZCc6IC8vIOWkqVxyXG4gICAgICAgIHJldHVybiBub3cgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogdmFsO1xyXG4gICAgICBjYXNlICd3JzogLy8g5ZGoXHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3ICogdmFsO1xyXG4gICAgICBjYXNlICd5JzogLy8g5bm0XHJcbiAgICAgICAgcmV0dXJuIG5vdyArIDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjUgKiB2YWw7XHJcbiAgICAgIGNhc2UgJ3QnOiAvLyDoh6rlrprkuYlcclxuICAgICAgICByZXR1cm4gbm93ICsgdmFsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBzdHJpbmdpZnkodmFsdWU6IGFueSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHBhcnNlKHRleHQ6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCkgfHwgbnVsbDtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==