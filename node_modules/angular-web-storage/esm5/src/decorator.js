import { StorageUtil, isBrowser } from './util';
var cache = {};
function WebStorage(storage, key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 'd'; }
    return function (target, propertyName) {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: function () {
                return StorageUtil.get(storage, key);
            },
            set: function (value) {
                if (!cache[key]) {
                    var storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * `localStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function LocalStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? localStorage : null, key, expiredAt, expiredUnit);
}
/**
 * `sessionStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function SessionStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(isBrowser ? sessionStorage : null, key, expiredAt, expiredUnit);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci13ZWItc3RvcmFnZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFLN0QsSUFBTSxLQUFLLEdBQVcsRUFBRSxDQUFDO0FBRXpCLFNBQVMsVUFBVSxDQUNqQixPQUFnQixFQUNoQixHQUFXLEVBQ1gsU0FBcUIsRUFDckIsV0FBOEI7SUFEOUIsMEJBQUEsRUFBQSxhQUFxQjtJQUNyQiw0QkFBQSxFQUFBLGlCQUE4QjtJQUU5QixPQUFPLFVBQUMsTUFBYyxFQUFFLFlBQW9CO1FBQzFDLEdBQUcsR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRTtZQUMxQyxHQUFHLEVBQUU7Z0JBQ0gsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBVSxHQUFHLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQ0QsR0FBRyxFQUFFLFVBQUMsS0FBVTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFTLEdBQUcsQ0FBQyxFQUFFO29CQUN2QixJQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDMUQsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO3dCQUN4QixXQUFXLENBQUMsR0FBRyxDQUNiLE9BQU8sRUFDQyxHQUFHLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLENBQ1osQ0FBQztxQkFDSDtvQkFDRCxLQUFLLENBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUMxQixPQUFPO2lCQUNSO2dCQUNELFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZFLENBQUM7WUFDRCxVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFZLEVBQ1osU0FBcUIsRUFDckIsV0FBOEI7SUFEOUIsMEJBQUEsRUFBQSxhQUFxQjtJQUNyQiw0QkFBQSxFQUFBLGlCQUE4QjtJQUU5QixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsR0FBWSxFQUNaLFNBQXFCLEVBQ3JCLFdBQThCO0lBRDlCLDBCQUFBLEVBQUEsYUFBcUI7SUFDckIsNEJBQUEsRUFBQSxpQkFBOEI7SUFFOUIsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3BGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBpcmVkVW5pdCwgU3RvcmFnZVV0aWwsIGlzQnJvd3NlciB9IGZyb20gJy4vdXRpbCc7XHJcblxyXG5pbnRlcmZhY2UgSUNhY2hlIHtcclxuICBba2V5OiBzdHJpbmddOiBib29sZWFuO1xyXG59XHJcbmNvbnN0IGNhY2hlOiBJQ2FjaGUgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIFdlYlN0b3JhZ2UoXHJcbiAgc3RvcmFnZTogU3RvcmFnZSxcclxuICBrZXk6IHN0cmluZyxcclxuICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXHJcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ2QnLFxyXG4pIHtcclxuICByZXR1cm4gKHRhcmdldDogT2JqZWN0LCBwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAga2V5ID0ga2V5IHx8IHByb3BlcnR5TmFtZTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5TmFtZSwge1xyXG4gICAgICBnZXQ6ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gU3RvcmFnZVV0aWwuZ2V0KHN0b3JhZ2UsIDxzdHJpbmc+a2V5KTtcclxuICAgICAgfSxcclxuICAgICAgc2V0OiAodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICghY2FjaGVbPHN0cmluZz5rZXldKSB7XHJcbiAgICAgICAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IFN0b3JhZ2VVdGlsLmdldChzdG9yYWdlLCA8c3RyaW5nPmtleSk7XHJcbiAgICAgICAgICBpZiAoc3RvcmVkVmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgU3RvcmFnZVV0aWwuc2V0KFxyXG4gICAgICAgICAgICAgIHN0b3JhZ2UsXHJcbiAgICAgICAgICAgICAgPHN0cmluZz5rZXksXHJcbiAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgZXhwaXJlZEF0LFxyXG4gICAgICAgICAgICAgIGV4cGlyZWRVbml0LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2FjaGVbPHN0cmluZz5rZXldID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgU3RvcmFnZVV0aWwuc2V0KHN0b3JhZ2UsIDxzdHJpbmc+a2V5LCB2YWx1ZSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgbG9jYWxTdG9yYWdlYCBEZWNvcmF0b3JcclxuICpcclxuICogQHBhcmFtIFtleHBpcmVkQXQ9MF0gRXhwaXJhdGlvbiB0aW1lLCAwIG1lYW5zIGZvcmV2ZXJcclxuICogQHBhcmFtIFtleHBpcmVkVW5pdD0ndCddIEV4cGlyYXRpb24gdGltZSB1bml0IChkZWZhdWx0OiBjdXN0b20gW3VuaXQ6IG1zXSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBMb2NhbFN0b3JhZ2UoXHJcbiAga2V5Pzogc3RyaW5nLFxyXG4gIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcclxuICBleHBpcmVkVW5pdDogRXhwaXJlZFVuaXQgPSAndCcsXHJcbikge1xyXG4gIHJldHVybiBXZWJTdG9yYWdlKGlzQnJvd3NlciA/IGxvY2FsU3RvcmFnZSA6IG51bGwsIGtleSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgc2Vzc2lvblN0b3JhZ2VgIERlY29yYXRvclxyXG4gKlxyXG4gKiBAcGFyYW0gW2V4cGlyZWRBdD0wXSBFeHBpcmF0aW9uIHRpbWUsIDAgbWVhbnMgZm9yZXZlclxyXG4gKiBAcGFyYW0gW2V4cGlyZWRVbml0PSd0J10gRXhwaXJhdGlvbiB0aW1lIHVuaXQgKGRlZmF1bHQ6IGN1c3RvbSBbdW5pdDogbXNdKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNlc3Npb25TdG9yYWdlKFxyXG4gIGtleT86IHN0cmluZyxcclxuICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXHJcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ3QnLFxyXG4pIHtcclxuICByZXR1cm4gV2ViU3RvcmFnZShpc0Jyb3dzZXIgPyBzZXNzaW9uU3RvcmFnZSA6IG51bGwsIGtleSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XHJcbn1cclxuIl19